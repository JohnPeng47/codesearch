In "aider," code editing is primarily facilitated through various search functions available in the `CodeIndex` and `Search` classes. These functions allow for flexible and precise code search operations. Here are the different ways that code editing works in aider:

1. **Search by Query**: You can perform searches using a natural language description of the code you're looking for. This semantic search is useful when you want to locate code snippets related to a specific functionality or issue.

2. **Search by Code Snippet**: This method allows for an exact match search using a specific code snippet. It can be particularly useful when you need to find occurrences of a particular piece of code within the codebase.

3. **Search by Class Names**: You can search for specific class names, which is helpful when you need to investigate or edit all instances or references of a particular class.

4. **Search by Function Names**: Similar to class name searches, this allows you to search for specific function names across the codebase, aiding in edits or analyses related to particular functions.

5. **Search by File Pattern**: This involves using glob patterns to filter search results to specific file types or directories. It enables you to narrow down searches to particular parts of the codebase, such as all files in a certain module or directory.

6. **Combination of Search Parameters**: The search functions can combine several parameters like query, code snippet, class names, function names, and file patterns to conduct more targeted searches. This flexibility allows for highly specific searches tailored to various editing needs.

7. **System Prompts and Examples**: The search functionality is guided by detailed system prompts and few-shot examples, aiding the autonomous AI assistant in formulating accurate search queries based on the user's input.

These different search methods enable precise and efficient navigation and editing of the codebase, making it easier to locate and modify the relevant parts of the code.